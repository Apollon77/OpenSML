// Test for writing a SML-File

var sml = require('../index');

function runTest(testIndex) {
    var error=false;
    var smlFile = new sml.SmlFile();

    smlFile.parse(stream[testIndex]);

    console.log(smlFile.toString());
    if (!error) {
        console.log("WRITTEN:");
        var resBuffer=smlFile.write();
        var resHex=resBuffer.buffer.toString('hex');
        //resHex=resHex.replace(/650000/g,"63");
        console.log(resHex);
        console.log("READ:");
        console.log(stream[testIndex].toString('hex'));
        if (!compareMessages(resBuffer.buffer, stream[testIndex])) {
            process.exitCode = 1;
        }
    }
}

function compareMessages(buf1, buf2) {
    var length=(buf1.length>buf2.length)?buf1.length:buf2.length;
    var cnt_buf1=0;
    var cnt_buf2=0;
    var mismatch = false;
    do {
        if (buf1[cnt_buf1]!=buf2[cnt_buf2]) {
            if (buf1[cnt_buf1]===0x65 && buf2[cnt_buf2]===0x62) {
                if (buf1[cnt_buf1+1]!==0x00 || buf1[cnt_buf1+2]!==0x00 || buf1[cnt_buf1+3]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf1+=3;
                }
            }
            else if (buf1[cnt_buf1]===0x65 && buf2[cnt_buf2]===0x63) {
                if (buf1[cnt_buf1+1]!==0x00 || buf1[cnt_buf1+2]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf1+=2;
                }
            }
            else if (buf1[cnt_buf1]===0x65 && buf2[cnt_buf2]===0x64) {
                if (buf1[cnt_buf1+1]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf1+=1;
                }
            }
            else if (buf1[cnt_buf1]===0x59 && buf2[cnt_buf2]===0x56) {
                if (buf1[cnt_buf1+1]!==0x00 || buf1[cnt_buf1+2]!==0x00 || buf1[cnt_buf1+3]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf1+=3;
                }
            }
            else if (buf1[cnt_buf1]===0x69 && (buf2[cnt_buf2]>0x61 && buf2[cnt_buf2]<0x69)) {
                // No compare possible because differntly coded somehow ... overread
                cnt_buf1+=8;
                cnt_buf2+=buf2[cnt_buf2]-0x61;
            }
            else if (buf1[cnt_buf1]===0x1b && buf2[cnt_buf2]===0x00) {
                // ignore different length of filler bytes at the end
                cnt_buf1-=1;
            }

            else if (buf2[cnt_buf2]===0x65 && buf1[cnt_buf1]===0x62) {
                if (buf2[cnt_buf2+1]!==0x00 || buf2[cnt_buf2+2]!==0x00 || buf2[cnt_buf2+3]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf2+=3;
                }
            }
            else if (buf2[cnt_buf2]===0x65 && buf1[cnt_buf1]===0x63) {
                if (buf2[cnt_buf2+1]!==0x00 || buf2[cnt_buf2+2]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf2+=2;
                }
            }
            else if (buf2[cnt_buf2]===0x65 && buf1[cnt_buf1]===0x64) {
                if (buf2[cnt_buf2+1]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf2+=1;
                }
            }
            else if (buf2[cnt_buf2]===0x59 && buf1[cnt_buf2]===0x56) {
                if (buf2[cnt_buf2+1]!==0x00 || buf2[cnt_buf2+2]!==0x00 || buf2[cnt_buf2+3]!==0x00) {
                    mismatch=true;
                    break;
                }
                else {
                    cnt_buf2+=3;
                }
            }
            else if (buf2[cnt_buf2]===0x69 && (buf1[cnt_buf1]>0x61 && buf1[cnt_buf1]<0x69)) {
                // No compare possible because differntly coded somehow ... overread
                cnt_buf2+=8;
                cnt_buf1+=buf1[cnt_buf1]-0x61;
            }
            else if (buf2[cnt_buf2]===0x1b && buf1[cnt_buf1]===0x00) {
                // ignore different length of filler bytes at the end
                cnt_buf2-=1;
            }

            else {
                mismatch=true;
                break;
            }
        }
        cnt_buf1++;
        cnt_buf2++;
    } while (cnt_buf1<buf1.length-3 && cnt_buf2<buf2.length-3);
    if (mismatch) {
        console.log("MISMATCH on Pos "+cnt_buf1+" ("+buf1[cnt_buf1].toString(16)+") vs. "+cnt_buf2+" ("+buf2[cnt_buf2].toString(16)+")");
    }
    if (cnt_buf1!=buf1.length-3) {
        console.log("No MISMATH, Compare Ended Pos. "+cnt_buf1+" from "+buf1.length+" available on buf1, ignoring rest");
    }
    if (cnt_buf2!=buf2.length-3) {
        console.log("No MISMATH, Compare Ended Pos. "+cnt_buf2+" from "+buf2.length+" available on buf1, ignoring rest");
    }
    return mismatch;
}

var stream = [];
/*00*/stream.push(new Buffer('76083534373132393062006200726301017601080500153b022e3908353437313238390a01a8153810780401020101631ab600', 'hex'));
/*01*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944f8f6301807975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb20175070100010801ff621e52ff5900000000000b8fb20175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001c20175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f816017507810000090b00620752006493668e0101016358b500", 'hex'));
/*02*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944f916301827975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb30175070100010801ff621e52ff5900000000000b8fb30175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001ed0175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f818017507810000090b00620752006493669201010163e80300", "hex"));
/*03*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944f956301807975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb30175070100010801ff621e52ff5900000000000b8fb30175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001b80175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f81d017507810000090b0062075200649366960101016327b500", "hex"));
/*04*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944f9a6301827975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb40175070100010801ff621e52ff5900000000000b8fb40175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001950175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f821017507810000090b00620752006493669a01010163a42000", "hex"));
/*05*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944f9e6301807975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb40175070100010801ff621e52ff5900000000000b8fb40175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001920175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f825017507810000090b00620752006493669f0101016379ae00", "hex"));
/*06*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944fa26301827975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb50175070100010801ff621e52ff5900000000000b8fb50175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001960175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f829017507810000090b0062075200649366a301010163f9a900", "hex"));
/*07*/stream.push(new Buffer("7608353437313239316200620072630401790a01a8153810780401027262026554e9f832620171078181c786180172620164944fa76301807975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb50175070100010801ff621e52ff5900000000000b8fb50175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001a00175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f82e017507810000090b0062075200649366a701010163e18300", "hex"));
/*08*/stream.push(new Buffer("1b1b1b1b010101017608353437313239326200620072630201710163baea000000001b1b1b1b1a0387ae", "hex"));
/*09*/stream.push(new Buffer("1b1b1b1b01010101760f30313233343536373839306162636200620072650000010176010f30353030313533623032326533390a3531303135383838310c316261353539306166316172620265ffffffff620163ffff00760a35313031353838383362006200726500000401790d31626135353930616631616172620265ffffffff6500000000710a72677264676466676672620165ffffffff69407820000000000074750d303130303031303830306666621e52ff5304e401750d303130303031303830316666621e52ff5304e401750d303130303130303730306666621e52ff53020b01750d303130303031303830326666621e52ff5303da01010163000000760a35313031353838383462006200726500000201710163000000", "hex"));
/*10*/stream.push(new Buffer("1b1b1b1b01010101760a34363034323731373662006200726302017101631763000000001b1b1b1b1a035bc5", "hex"));
/*11*/stream.push(new Buffer("1b1b1b1b01010101760700190b4cbead6200620072630101760101070019063f3f8f0b0901454d48000041f045010163662d00760700190b4cbeae620062007263070177010b0901454d48000041f045070100620affff72620165063f2f357777078181c78203ff0101010104454d480177070100000009ff010101010b0901454d48000041f0450177070100010800ff6400018201621e52ff560009247a550177070100010801ff0101621e52ff560009247a550177070100010802ff0101621e52ff5600000000000177070100100700ff0101621b52ff55000016030177078181c78205ff0172620165063f2f3501018302e77ef33ea97bb6bba9bfa4fbd8b9f2ede51207b15acf6b98a237c21ca4982ee3ce18efe8438f1deba9d5c40eb68ae8f201010163574a00760700190b4cbeb16200620072630201710163d658000000001b1b1b1b1a03e566", "hex"));
/*12*/stream.push(new Bufferhex"));
/*13*/stream.push(new Buffer("1b1b1b1b01010101760700190b4cbead62006200726500000101760101070019063f3f8f0b0901454d48000041f045010163662d00760700190b4cbeae6200620072650000070177010b0901454d48000041f045070100620affff72620165063f2f357777078181c78203ff0101010104454d480177070100000009ff010101010b0901454d48000041f0450177070100010800ff650000018201621e52ff590000000009247a550177070100010801ff0101621e52ff590000000009247a550177070100010802ff0101621e52ff5900000000000000000177070100100700ff0101621b52ff55000016030177078181c78205ff0172620165063f2f3501018302e77ef33ea97bb6bba9bfa4fbd8b9f2ede51207b15acf6b98a237c21ca4982ee3ce18efe8438f1deba9d5c40eb68ae8f201010163574a00760700190b4cbeb162006200726500000201710163d658000000001b1b1b1b1a033fec", "hex")); // written by self from 11
/*14*/stream.push(new Buffer("76074954413030316200620072630701770109313130323132333401726201654b8c03857677078181c78203ff01010101044954410177070100000000ff0101010105110212340177070100010800ff0101621e520055009d51c00177070100020800ff0101621e520055002e630101770701000f0700ff0101621b520055000000020177070100190700ff0101622152fd55000004b1010101636d610000001b1b1b1b1a023655", "hex"));
/*15*/stream.push(new Buffer("1B1B1B1B010101017607000D000BB2E1620062007263010176010107000D04B5E64B0B06454D480102715466F50101633FB6007607000D000BB2E2620062007263070177010B06454D480102715466F5017262016504B5825E7777078181C78203FF0101010104454D480177070100000009FF010101010B06454D480102715466F50177070100010800FF63020001621E52FF560005083F1D0177070100010801FF0101621E52FF560001DB16240177070100010802FF0101621E52FF5600032D28F901770701000F0700FF0101621B52FF55000000000177078181C78205FF0101010183022D71B54A09ACC232221CE8C146CAAA4077F0DB516FC0E1F96D6931BA2509566133FB1D8EF519BF19B149790E864EEA46010101631097007607000D000BB2E362006200726302017101633CDD00001B1B1B1B1A011174", "hex"));
/*16*/stream.push(new Bufferhex"));
/*17*/stream.push(new Buffer("76083534373132393162006200726500000401790a01a8153810780401027262026554e9f832650000000171078181c78618017262016500944f8f6940780000000000007975070100000009ff62ff52000a01a8153810780401020175070100010800ff621e52ff5900000000000b8fb20175070100010801ff621e52ff5900000000000b8fb20175070100010802ff621e52ff5900000000000000000175070100100700ff621b52ff55000001c20175078181c78203ff62ff520004454d480175078181c78205ff62ff52008302097bd1b6e37d93f97c5c2fa1f385fabb84ed2465c8d3d5f14f021fa863929ef62c99f6b53993253fcf3de7c33167f717017507010000090b00620752006554e9f816017507810000090b0062075200650093668e0101016358b500", "hex")); // written by self from 1


var testIndex = -1;
if (process.argv[2]) {
    testIndex=parseInt(process.argv[2], 10);
    console.log("Use Test "+testIndex);
    if (isNaN(testIndex) || testIndex>=stream.length) {
        testIndex=-1;
    }
}
if (testIndex==-1) {
    for (var i=0;i<stream.length;i++) {
        console.log("========================");
        console.log("Start Test "+i);
    	runTest(i);
    }
}
else {
    runTest(testIndex);
}
